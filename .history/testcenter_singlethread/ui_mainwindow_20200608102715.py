# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\testcenter20190116备份（增加qtextedit中进行发送命令）\testcenter20190102备份\testcenter\Testcenter\testcenter_singlethread\mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate,QDateTime,QTime
from PyQt5.QtWidgets import QDateTimeEdit 
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QLCDNumber 
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(775, 726)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(40, 80))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Graphics/images/RuiJie.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStatusTip("")
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setDockNestingEnabled(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.mdiArea = QtWidgets.QMdiArea(self.centralwidget)
        self.mdiArea.setViewMode(QtWidgets.QMdiArea.TabbedView)
        self.mdiArea.setTabsClosable(True)
        self.mdiArea.setTabsMovable(True)
        self.mdiArea.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.mdiArea.setObjectName("mdiArea")
        self.verticalLayout_2.addWidget(self.mdiArea)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 775, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.scripts = QtWidgets.QMenu(self.menu_3)
        self.scripts.setObjectName("scripts")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName("menu_6")
        self.menuCommonTestCommand = QtWidgets.QMenu(self.menu_6)
        self.menuCommonTestCommand.setObjectName("menuCommonTestCommand")
        self.menu_7 = QtWidgets.QMenu(self.menubar)
        self.menu_7.setObjectName("menu_7")
        self.actionCreateTest = QtWidgets.QMenu(self.menu_7)
        self.actionCreateTest.setObjectName("actionCreateTest")
        self.menuQuickTest = QtWidgets.QMenu(self.menu_7)
        self.menuQuickTest.setObjectName("menuQuickTest")
        self.menuSIT_TEST = QtWidgets.QMenu(self.menuQuickTest)
        self.menuSIT_TEST.setObjectName("menuSIT_TEST")
        self.menuCompatibility_Test = QtWidgets.QMenu(self.menuSIT_TEST)
        self.menuCompatibility_Test.setObjectName("menuCompatibility_Test")
        self.menuRegister_Test = QtWidgets.QMenu(self.menuQuickTest)
        self.menuRegister_Test.setObjectName("menuRegister_Test")
        self.menu_9 = QtWidgets.QMenu(self.menubar)
        self.menu_9.setObjectName("menu_9")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.clientSetting = QtWidgets.QDockWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clientSetting.sizePolicy().hasHeightForWidth())
        self.clientSetting.setSizePolicy(sizePolicy)
        self.clientSetting.setMinimumSize(QtCore.QSize(170, 80))
        self.clientSetting.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.clientSetting.setAllowedAreas(QtCore.Qt.AllDockWidgetAreas)
        self.clientSetting.setObjectName("clientSetting")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.protocolSetting = QtWidgets.QTabWidget(self.dockWidgetContents)
        self.protocolSetting.setGeometry(QtCore.QRect(0, 0, 170, 450))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.protocolSetting.sizePolicy().hasHeightForWidth())
        self.protocolSetting.setSizePolicy(sizePolicy)
        self.protocolSetting.setMinimumSize(QtCore.QSize(160, 0))
        self.protocolSetting.setMaximumSize(QtCore.QSize(170, 16777215))
        self.protocolSetting.setStyleSheet("")
        self.protocolSetting.setObjectName("protocolSetting")
        self.protocalSettingPage1 = QtWidgets.QWidget()
        self.protocalSettingPage1.setObjectName("protocalSettingPage1")
        self.stop_bit = QtWidgets.QComboBox(self.protocalSettingPage1)
        self.stop_bit.setGeometry(QtCore.QRect(80, 180, 75, 20))
        self.stop_bit.setObjectName("stop_bit")
        self.stop_bit.addItem("")
        self.stop_bit.addItem("")
        self.stop_bit.addItem("")
        self.stop_bit.addItem("")
        self.data_bits = QtWidgets.QComboBox(self.protocalSettingPage1)
        self.data_bits.setGeometry(QtCore.QRect(80, 150, 75, 20))
        self.data_bits.setObjectName("data_bits")
        self.data_bits.addItem("")
        self.data_bits.addItem("")
        self.data_bits.addItem("")
        self.data_bits.addItem("")
        self.open_close_buttom = QtWidgets.QPushButton(self.protocalSettingPage1)
        self.open_close_buttom.setGeometry(QtCore.QRect(10, 240, 145, 23))
        self.open_close_buttom.setStyleSheet("font: 9pt \"黑体\";\n"
"color: rgb(0, 0, 255);\n"
"selection-color: qconicalgradient(cx:0, cy:0, angle:135, stop:0 rgba(255, 255, 0, 69), stop:0.375 rgba(255, 255, 0, 69), stop:0.423533 rgba(251, 255, 0, 145), stop:0.45 rgba(247, 255, 0, 208), stop:0.477581 rgba(255, 244, 71, 130), stop:0.518717 rgba(255, 218, 71, 130), stop:0.55 rgba(255, 255, 0, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69), stop:1 rgba(255, 255, 0, 69));")
        self.open_close_buttom.setObjectName("open_close_buttom")
        self.encodingtype = QtWidgets.QComboBox(self.protocalSettingPage1)
        self.encodingtype.setGeometry(QtCore.QRect(80, 270, 75, 20))
        self.encodingtype.setObjectName("encodingtype")
        self.encodingtype.addItem("")
        self.encodingtype.addItem("")
        self.encodingtype.addItem("")
        self.checksum_bits = QtWidgets.QComboBox(self.protocalSettingPage1)
        self.checksum_bits.setGeometry(QtCore.QRect(80, 210, 75, 20))
        self.checksum_bits.setObjectName("checksum_bits")
        self.checksum_bits.addItem("")
        self.checksum_bits.addItem("")
        self.checksum_bits.addItem("")
        self.checksum_bits.addItem("")
        self.checksum_bits.addItem("")
        self.checksum_bits.addItem("")
        self.check_com = QtWidgets.QPushButton(self.protocalSettingPage1)
        self.check_com.setGeometry(QtCore.QRect(80, 7, 75, 23))
        self.check_com.setAutoRepeatInterval(100)
        self.check_com.setDefault(True)
        self.check_com.setObjectName("check_com")
        self.s1__lb_12 = QtWidgets.QLabel(self.protocalSettingPage1)
        self.s1__lb_12.setGeometry(QtCore.QRect(10, 180, 48, 20))
        self.s1__lb_12.setObjectName("s1__lb_12")
        self.s1__lb_11 = QtWidgets.QLabel(self.protocalSettingPage1)
        self.s1__lb_11.setGeometry(QtCore.QRect(10, 210, 48, 20))
        self.s1__lb_11.setObjectName("s1__lb_11")
        self.baud_rate_option = QtWidgets.QComboBox(self.protocalSettingPage1)
        self.baud_rate_option.setGeometry(QtCore.QRect(80, 120, 75, 20))
        self.baud_rate_option.setObjectName("baud_rate_option")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.baud_rate_option.addItem("")
        self.label = QtWidgets.QLabel(self.protocalSettingPage1)
        self.label.setGeometry(QtCore.QRect(10, 270, 60, 20))
        self.label.setObjectName("label")
        self.com_option = QtWidgets.QComboBox(self.protocalSettingPage1)
        self.com_option.setGeometry(QtCore.QRect(80, 40, 75, 20))
        self.com_option.setObjectName("com_option")
        self.s1__lb_7 = QtWidgets.QLabel(self.protocalSettingPage1)
        self.s1__lb_7.setGeometry(QtCore.QRect(10, 7, 60, 21))
        self.s1__lb_7.setObjectName("s1__lb_7")
        self.label_2 = QtWidgets.QLabel(self.protocalSettingPage1)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 145, 12))
        self.label_2.setObjectName("label_2")
        self.s1__lb_9 = QtWidgets.QLabel(self.protocalSettingPage1)
        self.s1__lb_9.setGeometry(QtCore.QRect(10, 120, 48, 20))
        self.s1__lb_9.setObjectName("s1__lb_9")
        self.s1__lb_10 = QtWidgets.QLabel(self.protocalSettingPage1)
        self.s1__lb_10.setGeometry(QtCore.QRect(10, 150, 48, 20))
        self.s1__lb_10.setObjectName("s1__lb_10")
        self.s1__lb_8 = QtWidgets.QLabel(self.protocalSettingPage1)
        self.s1__lb_8.setGeometry(QtCore.QRect(10, 40, 60, 20))
        self.s1__lb_8.setObjectName("s1__lb_8")
        self.renameconsole = QtWidgets.QLineEdit(self.protocalSettingPage1)
        self.renameconsole.setGeometry(QtCore.QRect(10, 90, 141, 20))
        self.renameconsole.setObjectName("renameconsole")
        self.lineEdit_savelogdir = QtWidgets.QLineEdit(self.protocalSettingPage1)
        self.lineEdit_savelogdir.setGeometry(QtCore.QRect(0, 330, 161, 20))
        self.lineEdit_savelogdir.setObjectName("lineEdit_savelogdir")
        self.checkBox_savelog = QtWidgets.QCheckBox(self.protocalSettingPage1)
        self.checkBox_savelog.setGeometry(QtCore.QRect(10, 300, 61, 23))
        self.checkBox_savelog.setObjectName("checkBox_savelog")
        self.select_logdir = QtWidgets.QPushButton(self.protocalSettingPage1)
        self.select_logdir.setGeometry(QtCore.QRect(80, 300, 75, 23))
        self.select_logdir.setObjectName("select_logdir")
        self.protocolSetting.addTab(self.protocalSettingPage1, "")
        self.protocalSettingPage2 = QtWidgets.QWidget()
        self.protocalSettingPage2.setObjectName("protocalSettingPage2")
        self.newTelnet = QtWidgets.QPushButton(self.protocalSettingPage2)
        self.newTelnet.setGeometry(QtCore.QRect(0, 0, 75, 23))
        self.newTelnet.setObjectName("newTelnet")
        self.closeCurrentTelnet = QtWidgets.QPushButton(self.protocalSettingPage2)
        self.closeCurrentTelnet.setGeometry(QtCore.QRect(80, 0, 75, 23))
        self.closeCurrentTelnet.setObjectName("closeCurrentTelnet")
        self.treeWidget_3 = QtWidgets.QTreeWidget(self.protocalSettingPage2)
        self.treeWidget_3.setGeometry(QtCore.QRect(0, 20, 161, 501))
        self.treeWidget_3.setObjectName("treeWidget_3")
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget_3)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget_3)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget_3)
        self.protocolSetting.addTab(self.protocalSettingPage2, "")
        self.clientSetting.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.clientSetting)
        self.Sequencer = QtWidgets.QDockWidget(MainWindow)
        self.Sequencer.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Sequencer.sizePolicy().hasHeightForWidth())
        self.Sequencer.setSizePolicy(sizePolicy)
        self.Sequencer.setBaseSize(QtCore.QSize(215, 585))
        self.Sequencer.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.Sequencer.setAllowedAreas(QtCore.Qt.AllDockWidgetAreas)
        self.Sequencer.setObjectName("Sequencer")
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.dockWidgetContents_3)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBoxSequenceToolBar = QtWidgets.QGroupBox(self.dockWidgetContents_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBoxSequenceToolBar.sizePolicy().hasHeightForWidth())
        self.groupBoxSequenceToolBar.setSizePolicy(sizePolicy)
        self.groupBoxSequenceToolBar.setMaximumSize(QtCore.QSize(16777215, 21))
        self.groupBoxSequenceToolBar.setTitle("")
        self.groupBoxSequenceToolBar.setObjectName("groupBoxSequenceToolBar")
        self.layoutWidget_2 = QtWidgets.QWidget(self.groupBoxSequenceToolBar)
        self.layoutWidget_2.setGeometry(QtCore.QRect(0, 0, 248, 26))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout_5.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.toolButton_9 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_9.setStyleSheet("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Graphics/images/start.bmp"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_9.setIcon(icon1)
        self.toolButton_9.setAutoRaise(True)
        self.toolButton_9.setObjectName("toolButton_9")
        self.horizontalLayout_5.addWidget(self.toolButton_9)
        self.toolButton_10 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_10.setStyleSheet("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Graphics/images/pause.bmp"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_10.setIcon(icon2)
        self.toolButton_10.setAutoRaise(True)
        self.toolButton_10.setObjectName("toolButton_10")
        self.horizontalLayout_5.addWidget(self.toolButton_10)
        self.toolButton_11 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_11.setStyleSheet("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Graphics/images/laststep.bmp"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_11.setIcon(icon3)
        self.toolButton_11.setAutoRaise(True)
        self.toolButton_11.setObjectName("toolButton_11")
        self.horizontalLayout_5.addWidget(self.toolButton_11)
        self.toolButton_12 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_12.setStyleSheet("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Graphics/images/nextstep.bmp"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_12.setIcon(icon4)
        self.toolButton_12.setAutoRaise(True)
        self.toolButton_12.setObjectName("toolButton_12")
        self.horizontalLayout_5.addWidget(self.toolButton_12)
        self.toolButton_13 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_13.setStyleSheet("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/Graphics/images/stop.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_13.setIcon(icon5)
        self.toolButton_13.setAutoRaise(True)
        self.toolButton_13.setObjectName("toolButton_13")
        self.horizontalLayout_5.addWidget(self.toolButton_13)
        self.toolButton_14 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_14.setAutoFillBackground(False)
        self.toolButton_14.setStyleSheet("background-color: rgb(164, 255, 108);\n"
"")
        self.toolButton_14.setAutoRaise(True)
        self.toolButton_14.setObjectName("toolButton_14")
        self.horizontalLayout_5.addWidget(self.toolButton_14)
        self.toolButton_15 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_15.setStyleSheet(" border: none; \n"
"background-color: rgb(174, 255, 188);")
        self.toolButton_15.setAutoRaise(True)
        self.toolButton_15.setObjectName("toolButton_15")
        self.horizontalLayout_5.addWidget(self.toolButton_15)
        self.toolButton_16 = QtWidgets.QToolButton(self.layoutWidget_2)
        self.toolButton_16.setStyleSheet("background-color: rgb(215, 255, 223);")
        self.toolButton_16.setAutoRaise(True)
        self.toolButton_16.setObjectName("toolButton_16")
        self.horizontalLayout_5.addWidget(self.toolButton_16)
        self.verticalLayout.addWidget(self.groupBoxSequenceToolBar)
        self.treeWidget_sequencer = QtWidgets.QTreeWidget(self.dockWidgetContents_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget_sequencer.sizePolicy().hasHeightForWidth())
        self.treeWidget_sequencer.setSizePolicy(sizePolicy)
        self.treeWidget_sequencer.setBaseSize(QtCore.QSize(10, 12))
        self.treeWidget_sequencer.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.treeWidget_sequencer.setAutoExpandDelay(0)
        self.treeWidget_sequencer.setIndentation(10)
        self.treeWidget_sequencer.setRootIsDecorated(True)
        self.treeWidget_sequencer.setUniformRowHeights(False)
        self.treeWidget_sequencer.setItemsExpandable(True)
        self.treeWidget_sequencer.setHeaderHidden(False)
        self.treeWidget_sequencer.setColumnCount(3)
        self.treeWidget_sequencer.setObjectName("treeWidget_sequencer")
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget_sequencer)
        item_0.setCheckState(0, QtCore.Qt.Checked)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Checked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Checked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget_sequencer)
        item_0.setCheckState(0, QtCore.Qt.Checked)
        item_0.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_1.setCheckState(0, QtCore.Qt.Checked)
        item_1.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsEditable|QtCore.Qt.ItemIsDragEnabled|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget_sequencer)
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget_sequencer)
        self.treeWidget_sequencer.header().setVisible(True)
        self.treeWidget_sequencer.header().setDefaultSectionSize(100)
        self.treeWidget_sequencer.header().setHighlightSections(False)
        self.treeWidget_sequencer.header().setSortIndicatorShown(False)
        self.treeWidget_sequencer.header().setStretchLastSection(True)
        self.verticalLayout.addWidget(self.treeWidget_sequencer)
        self.Sequencer.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.Sequencer)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_quickcommand = QtWidgets.QToolBar(MainWindow)
        self.toolBar_quickcommand.setMovable(True)
        self.toolBar_quickcommand.setAllowedAreas(QtCore.Qt.BottomToolBarArea|QtCore.Qt.TopToolBarArea)
        self.toolBar_quickcommand.setFloatable(False)
        self.toolBar_quickcommand.setObjectName("toolBar_quickcommand")
        MainWindow.addToolBar(QtCore.Qt.BottomToolBarArea, self.toolBar_quickcommand)
        self.sendbuffer_dockwidget = QtWidgets.QDockWidget(MainWindow)
        self.sendbuffer_dockwidget.setSizeIncrement(QtCore.QSize(0, 0))
        self.sendbuffer_dockwidget.setFloating(False)
        self.sendbuffer_dockwidget.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.sendbuffer_dockwidget.setObjectName("sendbuffer_dockwidget")
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.dockWidgetContents_5)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.dockWidgetContents_5)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.horizontalLayout_2.addWidget(self.plainTextEdit)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.keycombination = QtWidgets.QPushButton(self.dockWidgetContents_5)
        self.keycombination.setObjectName("keycombination")
        self.verticalLayout_3.addWidget(self.keycombination)
        self.clearsendbuffer = QtWidgets.QPushButton(self.dockWidgetContents_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clearsendbuffer.sizePolicy().hasHeightForWidth())
        self.clearsendbuffer.setSizePolicy(sizePolicy)
        self.clearsendbuffer.setObjectName("clearsendbuffer")
        self.verticalLayout_3.addWidget(self.clearsendbuffer)
        self.send_button = QtWidgets.QPushButton(self.dockWidgetContents_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.send_button.sizePolicy().hasHeightForWidth())
        self.send_button.setSizePolicy(sizePolicy)
        self.send_button.setMaximumSize(QtCore.QSize(90, 50))
        self.send_button.setObjectName("send_button")
        self.verticalLayout_3.addWidget(self.send_button)
        self.timer_lineEdit = QtWidgets.QLineEdit(self.dockWidgetContents_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timer_lineEdit.sizePolicy().hasHeightForWidth())
        self.timer_lineEdit.setSizePolicy(sizePolicy)
        self.timer_lineEdit.setMaximumSize(QtCore.QSize(90, 16777215))
        self.timer_lineEdit.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.timer_lineEdit.setObjectName("timer_lineEdit")
        self.verticalLayout_3.addWidget(self.timer_lineEdit)
        self.timer_send_checkbox = QtWidgets.QCheckBox(self.dockWidgetContents_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timer_send_checkbox.sizePolicy().hasHeightForWidth())
        self.timer_send_checkbox.setSizePolicy(sizePolicy)
        self.timer_send_checkbox.setObjectName("timer_send_checkbox")
        self.verticalLayout_3.addWidget(self.timer_send_checkbox)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.horizontalLayout_3.addLayout(self.horizontalLayout_2)
        self.sendbuffer_dockwidget.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.sendbuffer_dockwidget)
        self.message_dockwidget = QtWidgets.QDockWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.message_dockwidget.sizePolicy().hasHeightForWidth())
        self.message_dockwidget.setSizePolicy(sizePolicy)
        self.message_dockwidget.setMinimumSize(QtCore.QSize(200, 93))
        self.message_dockwidget.setFloating(False)
        self.message_dockwidget.setObjectName("message_dockwidget")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.dockWidgetContents_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.textEdit_message = QtWidgets.QTextEdit(self.dockWidgetContents_2)
        self.textEdit_message.setObjectName("textEdit_message")
        self.horizontalLayout.addWidget(self.textEdit_message)
        self.message_dockwidget.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.message_dockwidget)
        self.actionOPEN = QtWidgets.QAction(MainWindow)
        self.actionOPEN.setObjectName("actionOPEN")
        self.actionNEW = QtWidgets.QAction(MainWindow)
        self.actionNEW.setObjectName("actionNEW")
        self.actionCLOSE = QtWidgets.QAction(MainWindow)
        self.actionCLOSE.setObjectName("actionCLOSE")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.actionfuzhi = QtWidgets.QAction(MainWindow)
        self.actionfuzhi.setObjectName("actionfuzhi")
        self.actionniat = QtWidgets.QAction(MainWindow)
        self.actionniat.setObjectName("actionniat")
        self.actionVBScript = QtWidgets.QAction(MainWindow)
        self.actionVBScript.setObjectName("actionVBScript")
        self.actionJavaScript = QtWidgets.QAction(MainWindow)
        self.actionJavaScript.setObjectName("actionJavaScript")
        self.actionPython = QtWidgets.QAction(MainWindow)
        self.actionPython.setObjectName("actionPython")
        self.menuComSetting = QtWidgets.QAction(MainWindow)
        self.menuComSetting.setObjectName("menuComSetting")
        self.actionReadme = QtWidgets.QAction(MainWindow)
        self.actionReadme.setObjectName("actionReadme")
        self.actionContactUs = QtWidgets.QAction(MainWindow)
        self.actionContactUs.setObjectName("actionContactUs")
        self.menuComSearch = QtWidgets.QAction(MainWindow)
        self.menuComSearch.setObjectName("menuComSearch")
        self.actionShowToolBar = QtWidgets.QAction(MainWindow)
        self.actionShowToolBar.setCheckable(True)
        self.actionShowToolBar.setChecked(True)
        self.actionShowToolBar.setObjectName("actionShowToolBar")
        self.actionIntelligentTest = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("C:/Users/seeker/.designer/backup/AI1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionIntelligentTest.setIcon(icon6)
        self.actionIntelligentTest.setObjectName("actionIntelligentTest")
        self.actionvlan_config = QtWidgets.QAction(MainWindow)
        self.actionvlan_config.setObjectName("actionvlan_config")
        self.actionvlan_auto_config = QtWidgets.QAction(MainWindow)
        self.actionvlan_auto_config.setObjectName("actionvlan_auto_config")
        self.active_sequencer = QtWidgets.QAction(MainWindow)
        self.active_sequencer.setCheckable(True)
        self.active_sequencer.setChecked(True)
        self.active_sequencer.setEnabled(True)
        self.active_sequencer.setObjectName("active_sequencer")
        self.active_serial_setting = QtWidgets.QAction(MainWindow)
        self.active_serial_setting.setCheckable(True)
        self.active_serial_setting.setChecked(True)
        self.active_serial_setting.setEnabled(True)
        self.active_serial_setting.setObjectName("active_serial_setting")
        self.actionSendCommand = QtWidgets.QAction(MainWindow)
        self.actionSendCommand.setObjectName("actionSendCommand")
        self.actionCharactorRecognition = QtWidgets.QAction(MainWindow)
        self.actionCharactorRecognition.setObjectName("actionCharactorRecognition")
        self.actionDelay = QtWidgets.QAction(MainWindow)
        self.actionDelay.setObjectName("actionDelay")
        self.actionAddTest = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/Graphics/images/AddTest.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionAddTest.setIcon(icon7)
        self.actionAddTest.setObjectName("actionAddTest")
        self.actionSettingDelay = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/Graphics/images/Delay.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSettingDelay.setIcon(icon8)
        self.actionSettingDelay.setObjectName("actionSettingDelay")
        self.actionLogRecognition = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/Graphics/images/ScanText.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionLogRecognition.setIcon(icon9)
        self.actionLogRecognition.setObjectName("actionLogRecognition")
        self.actionSpecialTest = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/Graphics/images/SpecialTest.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionSpecialTest.setIcon(icon10)
        self.actionSpecialTest.setObjectName("actionSpecialTest")
        self.actionExpertScan = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/Graphics/images/ExpertScan.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionExpertScan.setIcon(icon11)
        self.actionExpertScan.setObjectName("actionExpertScan")
        self.actionDeleteTest = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/Graphics/images/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.actionDeleteTest.setIcon(icon12)
        self.actionDeleteTest.setObjectName("actionDeleteTest")
        self.actionSpecialTest_2 = QtWidgets.QAction(MainWindow)
        self.actionSpecialTest_2.setObjectName("actionSpecialTest_2")
        self.actionExpertScan_2 = QtWidgets.QAction(MainWindow)
        self.actionExpertScan_2.setObjectName("actionExpertScan_2")
        self.actionDeleteTest_2 = QtWidgets.QAction(MainWindow)
        self.actionDeleteTest_2.setObjectName("actionDeleteTest_2")
        self.menuTelnetSetting = QtWidgets.QAction(MainWindow)
        self.menuTelnetSetting.setObjectName("menuTelnetSetting")
        self.actionStartSession = QtWidgets.QAction(MainWindow)
        self.actionStartSession.setObjectName("actionStartSession")
        self.menuShowSequencer = QtWidgets.QAction(MainWindow)
        self.menuShowSequencer.setObjectName("menuShowSequencer")
        self.action11_X_main_program = QtWidgets.QAction(MainWindow)
        self.action11_X_main_program.setObjectName("action11_X_main_program")
        self.action12_X_main_program = QtWidgets.QAction(MainWindow)
        self.action12_X_main_program.setObjectName("action12_X_main_program")
        self.actionport_test = QtWidgets.QAction(MainWindow)
        self.actionport_test.setObjectName("actionport_test")
        self.actionFan_Test = QtWidgets.QAction(MainWindow)
        self.actionFan_Test.setObjectName("actionFan_Test")
        self.actionPower_Test = QtWidgets.QAction(MainWindow)
        self.actionPower_Test.setObjectName("actionPower_Test")
        self.actionInformation_Test = QtWidgets.QAction(MainWindow)
        self.actionInformation_Test.setObjectName("actionInformation_Test")
        self.actionModule_Compatibility = QtWidgets.QAction(MainWindow)
        self.actionModule_Compatibility.setObjectName("actionModule_Compatibility")
        self.actionSwitch_Compatibility = QtWidgets.QAction(MainWindow)
        self.actionSwitch_Compatibility.setObjectName("actionSwitch_Compatibility")
        self.actionTestCommandUpdate = QtWidgets.QAction(MainWindow)
        self.actionTestCommandUpdate.setObjectName("actionTestCommandUpdate")
        self.actionStop_Test = QtWidgets.QAction(MainWindow)
        self.actionStop_Test.setObjectName("actionStop_Test")
        self.actionPause_Test = QtWidgets.QAction(MainWindow)
        self.actionPause_Test.setObjectName("actionPause_Test")
        self.actionLoad_Base_Line = QtWidgets.QAction(MainWindow)
        self.actionLoad_Base_Line.setObjectName("actionLoad_Base_Line")
        self.actionBase_Line_Generator = QtWidgets.QAction(MainWindow)
        self.actionBase_Line_Generator.setObjectName("actionBase_Line_Generator")
        self.actionshow_command = QtWidgets.QAction(MainWindow)
        self.actionshow_command.setObjectName("actionshow_command")
        self.actionAddQuickCommand = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/Graphics/images/addquickcommand.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddQuickCommand.setIcon(icon13)
        self.actionAddQuickCommand.setObjectName("actionAddQuickCommand")
        self.actionshow_version = QtWidgets.QAction(MainWindow)
        self.actionshow_version.setObjectName("actionshow_version")
        self.actionshow_version_detail = QtWidgets.QAction(MainWindow)
        self.actionshow_version_detail.setObjectName("actionshow_version_detail")
        self.actionshow_manu = QtWidgets.QAction(MainWindow)
        self.actionshow_manu.setObjectName("actionshow_manu")
        self.actionshow_int_sta = QtWidgets.QAction(MainWindow)
        self.actionshow_int_sta.setObjectName("actionshow_int_sta")
        self.actionshow_power = QtWidgets.QAction(MainWindow)
        self.actionshow_power.setObjectName("actionshow_power")
        self.actionshow_fan = QtWidgets.QAction(MainWindow)
        self.actionshow_fan.setObjectName("actionshow_fan")
        self.actionrun_system_shell = QtWidgets.QAction(MainWindow)
        self.actionrun_system_shell.setObjectName("actionrun_system_shell")
        self.actiondebug_ssa = QtWidgets.QAction(MainWindow)
        self.actiondebug_ssa.setObjectName("actiondebug_ssa")
        self.actionloganalyzer = QtWidgets.QAction(MainWindow)
        self.actionloganalyzer.setObjectName("actionloganalyzer")
        self.Sequencer.raise_()
        self.sendbuffer_dockwidget.raise_()
        self.message_dockwidget.raise_()
        self.menu.addAction(self.actionOPEN)
        self.menu.addAction(self.actionNEW)
        self.menu.addAction(self.actionCLOSE)
        self.menu_2.addAction(self.actionfuzhi)
        self.menu_2.addAction(self.actionniat)
        self.scripts.addAction(self.actionVBScript)
        self.scripts.addAction(self.actionJavaScript)
        self.scripts.addAction(self.actionPython)
        self.menu_3.addAction(self.scripts.menuAction())
        self.menu_4.addAction(self.menuComSetting)
        self.menu_4.addAction(self.menuTelnetSetting)
        self.menu_4.addAction(self.menuComSearch)
        self.menu_5.addAction(self.actionvlan_config)
        self.menu_5.addAction(self.actionvlan_auto_config)
        self.menu_5.addAction(self.actionloganalyzer)
        self.menuCommonTestCommand.addAction(self.actionshow_command)
        self.menuCommonTestCommand.addAction(self.actionTestCommandUpdate)
        self.menu_6.addAction(self.menuCommonTestCommand.menuAction())
        self.menu_6.addAction(self.actionReadme)
        self.menu_6.addAction(self.actionContactUs)
        self.actionCreateTest.addAction(self.actionSendCommand)
        self.actionCreateTest.addAction(self.actionDelay)
        self.actionCreateTest.addAction(self.actionCharactorRecognition)
        self.actionCreateTest.addAction(self.actionSpecialTest_2)
        self.actionCreateTest.addAction(self.actionExpertScan_2)
        self.actionCreateTest.addAction(self.actionDeleteTest_2)
        self.menuCompatibility_Test.addAction(self.actionModule_Compatibility)
        self.menuCompatibility_Test.addAction(self.actionSwitch_Compatibility)
        self.menuSIT_TEST.addAction(self.actionport_test)
        self.menuSIT_TEST.addAction(self.actionFan_Test)
        self.menuSIT_TEST.addAction(self.actionPower_Test)
        self.menuSIT_TEST.addAction(self.actionInformation_Test)
        self.menuSIT_TEST.addAction(self.menuCompatibility_Test.menuAction())
        self.menuRegister_Test.addAction(self.actionLoad_Base_Line)
        self.menuRegister_Test.addAction(self.actionBase_Line_Generator)
        self.menuQuickTest.addAction(self.action11_X_main_program)
        self.menuQuickTest.addAction(self.action12_X_main_program)
        self.menuQuickTest.addAction(self.menuSIT_TEST.menuAction())
        self.menuQuickTest.addAction(self.menuRegister_Test.menuAction())
        self.menu_7.addAction(self.actionCreateTest.menuAction())
        self.menu_7.addSeparator()
        self.menu_7.addAction(self.actionStartSession)
        self.menu_7.addAction(self.actionPause_Test)
        self.menu_7.addAction(self.actionStop_Test)
        self.menu_7.addAction(self.menuQuickTest.menuAction())
        self.menu_7.addAction(self.actionIntelligentTest)
        self.menu_9.addAction(self.active_sequencer)
        self.menu_9.addAction(self.active_serial_setting)
        self.menu_9.addAction(self.actionShowToolBar)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_9.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())
        self.menubar.addAction(self.menu_7.menuAction())
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionAddTest)
        self.toolBar.addAction(self.actionSettingDelay)
        self.toolBar.addAction(self.actionLogRecognition)
        self.toolBar.addAction(self.actionSpecialTest)
        self.toolBar.addAction(self.actionExpertScan)
        self.toolBar.addAction(self.actionDeleteTest)
        self.toolBar.addSeparator()
        self.toolBar_quickcommand.addAction(self.actionAddQuickCommand)

        # #创建日期时间空间，并把当前日期时间赋值，。并修改显示格式
        # self.dateEdit=QDateTimeEdit(QDateTime.currentDateTime()) #QDateTime.currentDateTime(),
        # self.dateEdit.setDisplayFormat('yyyy-MM-dd HH:mm:ss')
        
        # # #设置日期最大值与最小值，在当前日期的基础上，后一年与前一年
        # # self.dateEdit.setMinimumDate(QDate.currentDate().addDays(-365))
        # # self.dateEdit.setMaximumDate(QDate.currentDate().addDays(365))
        
        # #设置日历控件允许弹出
        # self.dateEdit.setCalendarPopup(True)
        
        # # #当日期改变时触发槽函数
        # # self.dateEdit.dateChanged.connect(self.onDateChanged)
        # # #当日期时间改变时触发槽函数
        # # self.dateEdit.dateTimeChanged.connect(self.onDateTimeChanged)
        # # #当时间改变时触发槽函数
        # # self.dateEdit.timeChanged.connect(self.onTimeChanged)

        # self.toolBar.addWidget(self.dateEdit)

        


        self.retranslateUi(MainWindow)
        self.protocolSetting.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "自动化测试平台"))
        self.menu.setTitle(_translate("MainWindow", "文件&F"))
        self.menu_2.setTitle(_translate("MainWindow", "编辑&E"))
        self.menu_3.setTitle(_translate("MainWindow", "脚本&P"))
        self.scripts.setTitle(_translate("MainWindow", "运行脚本"))
        self.menu_4.setTitle(_translate("MainWindow", "设置&S"))
        self.menu_5.setTitle(_translate("MainWindow", "工具&T"))
        self.menu_6.setTitle(_translate("MainWindow", "帮助&H"))
        self.menuCommonTestCommand.setTitle(_translate("MainWindow", "常用测试命令大全"))
        self.menu_7.setTitle(_translate("MainWindow", "测试向导&W"))
        self.actionCreateTest.setTitle(_translate("MainWindow", "创建测试"))
        self.menuQuickTest.setTitle(_translate("MainWindow", "快速测试"))
        self.menuSIT_TEST.setTitle(_translate("MainWindow", "SIT测试"))
        self.menuCompatibility_Test.setTitle(_translate("MainWindow", "兼容性测试"))
        self.menuRegister_Test.setTitle(_translate("MainWindow", "寄存器基线测试"))
        self.menu_9.setTitle(_translate("MainWindow", "显示"))
        self.clientSetting.setWindowTitle(_translate("MainWindow", "终端配置"))
        self.stop_bit.setItemText(0, _translate("MainWindow", "OneStop"))
        self.stop_bit.setItemText(1, _translate("MainWindow", "OneAndHalfStop"))
        self.stop_bit.setItemText(2, _translate("MainWindow", "TwoStop"))
        self.stop_bit.setItemText(3, _translate("MainWindow", "UnknownStopBits"))
        self.data_bits.setItemText(0, _translate("MainWindow", "8"))
        self.data_bits.setItemText(1, _translate("MainWindow", "7"))
        self.data_bits.setItemText(2, _translate("MainWindow", "6"))
        self.data_bits.setItemText(3, _translate("MainWindow", "5"))
        self.open_close_buttom.setText(_translate("MainWindow", "点击打开串口"))
        self.encodingtype.setItemText(0, _translate("MainWindow", "GB2312"))
        self.encodingtype.setItemText(1, _translate("MainWindow", "Default"))
        self.encodingtype.setItemText(2, _translate("MainWindow", "UTF-8"))
        self.checksum_bits.setItemText(0, _translate("MainWindow", "No"))
        self.checksum_bits.setItemText(1, _translate("MainWindow", "Even"))
        self.checksum_bits.setItemText(2, _translate("MainWindow", "Odd"))
        self.checksum_bits.setItemText(3, _translate("MainWindow", "Space"))
        self.checksum_bits.setItemText(4, _translate("MainWindow", "Mark"))
        self.checksum_bits.setItemText(5, _translate("MainWindow", "Unknown"))
        self.check_com.setText(_translate("MainWindow", "检测串口"))
        self.s1__lb_12.setText(_translate("MainWindow", "停止位："))
        self.s1__lb_11.setText(_translate("MainWindow", "校验位："))
        self.baud_rate_option.setItemText(0, _translate("MainWindow", "9600"))
        self.baud_rate_option.setItemText(1, _translate("MainWindow", "115200"))
        self.baud_rate_option.setItemText(2, _translate("MainWindow", "57600"))
        self.baud_rate_option.setItemText(3, _translate("MainWindow", "2400"))
        self.baud_rate_option.setItemText(4, _translate("MainWindow", "4800"))
        self.baud_rate_option.setItemText(5, _translate("MainWindow", "14400"))
        self.baud_rate_option.setItemText(6, _translate("MainWindow", "19200"))
        self.baud_rate_option.setItemText(7, _translate("MainWindow", "38400"))
        self.baud_rate_option.setItemText(8, _translate("MainWindow", "76800"))
        self.baud_rate_option.setItemText(9, _translate("MainWindow", "12800"))
        self.baud_rate_option.setItemText(10, _translate("MainWindow", "230400"))
        self.baud_rate_option.setItemText(11, _translate("MainWindow", "460800"))
        self.label.setText(_translate("MainWindow", "终端编码："))
        self.s1__lb_7.setText(_translate("MainWindow", "串口检测："))
        self.label_2.setText(_translate("MainWindow", "可对终端重命名："))
        self.s1__lb_9.setText(_translate("MainWindow", "波特率："))
        self.s1__lb_10.setText(_translate("MainWindow", "数据位："))
        self.s1__lb_8.setText(_translate("MainWindow", "串口选择："))
        self.checkBox_savelog.setText(_translate("MainWindow", "保存log"))
        self.select_logdir.setText(_translate("MainWindow", "log保存路径"))
        self.protocolSetting.setTabText(self.protocolSetting.indexOf(self.protocalSettingPage1), _translate("MainWindow", "串口"))
        self.newTelnet.setText(_translate("MainWindow", "新建连接"))
        self.closeCurrentTelnet.setText(_translate("MainWindow", "断开连接"))
        self.treeWidget_3.headerItem().setText(0, _translate("MainWindow", "sessions"))
        __sortingEnabled = self.treeWidget_3.isSortingEnabled()
        self.treeWidget_3.setSortingEnabled(False)
        self.treeWidget_3.topLevelItem(0).setText(0, _translate("MainWindow", "192.168.213.111 20015"))
        self.treeWidget_3.topLevelItem(1).setText(0, _translate("MainWindow", "com"))
        self.treeWidget_3.topLevelItem(2).setText(0, _translate("MainWindow", "192.168.213.154 20151544"))
        self.treeWidget_3.setSortingEnabled(__sortingEnabled)
        self.protocolSetting.setTabText(self.protocolSetting.indexOf(self.protocalSettingPage2), _translate("MainWindow", "Telnet"))
        self.Sequencer.setWindowTitle(_translate("MainWindow", "测试序列"))
        self.toolButton_9.setText(_translate("MainWindow", "开始"))
        self.toolButton_10.setText(_translate("MainWindow", "暂停"))
        self.toolButton_11.setText(_translate("MainWindow", "上一步"))
        self.toolButton_12.setText(_translate("MainWindow", "下一步"))
        self.toolButton_13.setText(_translate("MainWindow", "停止"))
        self.toolButton_14.setText(_translate("MainWindow", "更新"))
        self.toolButton_15.setText(_translate("MainWindow", "保存"))
        self.toolButton_16.setText(_translate("MainWindow", "导入"))
        self.treeWidget_sequencer.headerItem().setText(0, _translate("MainWindow", "命令"))
        self.treeWidget_sequencer.headerItem().setText(1, _translate("MainWindow", "说明"))
        self.treeWidget_sequencer.headerItem().setText(2, _translate("MainWindow", "备注"))
        __sortingEnabled = self.treeWidget_sequencer.isSortingEnabled()
        self.treeWidget_sequencer.setSortingEnabled(False)
        self.treeWidget_sequencer.topLevelItem(0).setText(0, _translate("MainWindow", "show version detail "))
        self.treeWidget_sequencer.topLevelItem(0).setText(1, _translate("MainWindow", "show信息"))
        self.treeWidget_sequencer.topLevelItem(0).setText(2, _translate("MainWindow", "客户端 dut1主"))
        self.treeWidget_sequencer.topLevelItem(0).child(0).setText(0, _translate("MainWindow", "scan"))
        self.treeWidget_sequencer.topLevelItem(0).child(0).setText(1, _translate("MainWindow", "识别对应信息是否正确"))
        self.treeWidget_sequencer.topLevelItem(0).child(1).setText(0, _translate("MainWindow", "print log"))
        self.treeWidget_sequencer.topLevelItem(0).child(1).setText(1, _translate("MainWindow", "打印报告"))
        self.treeWidget_sequencer.topLevelItem(1).setText(0, _translate("MainWindow", "sh pow "))
        self.treeWidget_sequencer.topLevelItem(1).setText(1, _translate("MainWindow", "show电源信息"))
        self.treeWidget_sequencer.topLevelItem(1).setText(2, _translate("MainWindow", "客户端 duit1 从"))
        self.treeWidget_sequencer.topLevelItem(1).child(0).setText(0, _translate("MainWindow", "scan"))
        self.treeWidget_sequencer.topLevelItem(1).child(0).setText(1, _translate("MainWindow", "识别对应信息是否正确"))
        self.treeWidget_sequencer.topLevelItem(2).setText(0, _translate("MainWindow", "XXX"))
        self.treeWidget_sequencer.topLevelItem(2).setText(1, _translate("MainWindow", "发包机打流"))
        self.treeWidget_sequencer.topLevelItem(2).setText(2, _translate("MainWindow", "客户端 发包机"))
        self.treeWidget_sequencer.topLevelItem(3).setText(0, _translate("MainWindow", "XXX"))
        self.treeWidget_sequencer.topLevelItem(3).setText(1, _translate("MainWindow", "自动上下电"))
        self.treeWidget_sequencer.topLevelItem(3).setText(2, _translate("MainWindow", "客户端 串口自动上下电工具"))
        self.treeWidget_sequencer.setSortingEnabled(__sortingEnabled)
        self.toolBar.setWindowTitle(_translate("MainWindow", "工具栏"))
        self.toolBar_quickcommand.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.sendbuffer_dockwidget.setWindowTitle(_translate("MainWindow", "发送缓冲区"))
        self.keycombination.setText(_translate("MainWindow", "常用组合键"))
        self.clearsendbuffer.setText(_translate("MainWindow", "清空发送缓冲区"))
        self.send_button.setText(_translate("MainWindow", "手动发送"))
        self.timer_lineEdit.setText(_translate("MainWindow", "2"))
        self.timer_send_checkbox.setText(_translate("MainWindow", "定时发(s/次)"))
        self.message_dockwidget.setWindowTitle(_translate("MainWindow", "Message"))
        self.actionOPEN.setText(_translate("MainWindow", "打开文件"))
        self.actionOPEN.setToolTip(_translate("MainWindow", "打开文件"))
        self.actionOPEN.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionNEW.setText(_translate("MainWindow", "新建测试项目"))
        self.actionNEW.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionCLOSE.setText(_translate("MainWindow", "保存项目"))
        self.actionCLOSE.setToolTip(_translate("MainWindow", "保存项目"))
        self.actionCLOSE.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.action_2.setText(_translate("MainWindow", "新建测试项"))
        self.action_2.setToolTip(_translate("MainWindow", "新建测试项"))
        self.action_3.setText(_translate("MainWindow", "保存测试"))
        self.actionfuzhi.setText(_translate("MainWindow", "复制"))
        self.actionniat.setText(_translate("MainWindow", "黏贴"))
        self.actionVBScript.setText(_translate("MainWindow", "VBScript"))
        self.actionJavaScript.setText(_translate("MainWindow", "JavaScript"))
        self.actionPython.setText(_translate("MainWindow", "Python"))
        self.menuComSetting.setText(_translate("MainWindow", "串口设置"))
        self.actionReadme.setText(_translate("MainWindow", "使用说明文档"))
        self.actionContactUs.setText(_translate("MainWindow", "联系我们"))
        self.menuComSearch.setText(_translate("MainWindow", "搜索串口"))
        self.actionShowToolBar.setText(_translate("MainWindow", "显示工具栏"))
        self.actionIntelligentTest.setText(_translate("MainWindow", "智能自学习测试"))
        self.actionvlan_config.setText(_translate("MainWindow", "vlan配置"))
        self.actionvlan_auto_config.setText(_translate("MainWindow", "vlan智能配置"))
        self.active_sequencer.setText(_translate("MainWindow", "显示测试命令序列"))
        self.active_serial_setting.setText(_translate("MainWindow", "显示终端设置"))
        self.actionSendCommand.setText(_translate("MainWindow", "添加发送命令"))
        self.actionCharactorRecognition.setText(_translate("MainWindow", "添加log识别"))
        self.actionDelay.setText(_translate("MainWindow", "增加延时"))
        self.actionAddTest.setText(_translate("MainWindow", "创建发送测试命令"))
        self.actionAddTest.setToolTip(_translate("MainWindow", "创建发送测试命令"))
        self.actionAddTest.setShortcut(_translate("MainWindow", "Alt+A"))
        self.actionSettingDelay.setText(_translate("MainWindow", "设置延时"))
        self.actionSettingDelay.setToolTip(_translate("MainWindow", "设置延时"))
        self.actionSettingDelay.setShortcut(_translate("MainWindow", "Alt+D"))
        self.actionLogRecognition.setText(_translate("MainWindow", "设置log识别内容"))
        self.actionLogRecognition.setToolTip(_translate("MainWindow", "设置log识别内容"))
        self.actionLogRecognition.setShortcut(_translate("MainWindow", "Alt+R"))
        self.actionSpecialTest.setText(_translate("MainWindow", "添加特殊测试"))
        self.actionSpecialTest.setToolTip(_translate("MainWindow", "添加特殊测试"))
        self.actionSpecialTest.setShortcut(_translate("MainWindow", "Alt+T"))
        self.actionExpertScan.setText(_translate("MainWindow", "高级log识别"))
        self.actionExpertScan.setToolTip(_translate("MainWindow", "高级log识别"))
        self.actionExpertScan.setShortcut(_translate("MainWindow", "Alt+F, Ctrl+F"))
        self.actionDeleteTest.setText(_translate("MainWindow", "删除选中测试"))
        self.actionDeleteTest.setToolTip(_translate("MainWindow", "删除选中测试"))
        self.actionSpecialTest_2.setText(_translate("MainWindow", "添加特殊测试"))
        self.actionExpertScan_2.setText(_translate("MainWindow", "高级log识别"))
        self.actionDeleteTest_2.setText(_translate("MainWindow", "删除单项测试"))
        self.menuTelnetSetting.setText(_translate("MainWindow", "Telnet设置"))
        self.actionStartSession.setText(_translate("MainWindow", "开始队列测试"))
        self.menuShowSequencer.setText(_translate("MainWindow", "显示测试序列"))
        self.action11_X_main_program.setText(_translate("MainWindow", "11.x主程序测试"))
        self.action12_X_main_program.setText(_translate("MainWindow", "12.X主程序测试"))
        self.actionport_test.setText(_translate("MainWindow", "端口测试"))
        self.actionFan_Test.setText(_translate("MainWindow", "风扇测试"))
        self.actionPower_Test.setText(_translate("MainWindow", "电源测试"))
        self.actionInformation_Test.setText(_translate("MainWindow", "资产管理测试"))
        self.actionModule_Compatibility.setText(_translate("MainWindow", "光模块兼容性测试"))
        self.actionSwitch_Compatibility.setText(_translate("MainWindow", "交换机兼容性测试"))
        self.actionTestCommandUpdate.setText(_translate("MainWindow", "更新同步命令"))
        self.actionStop_Test.setText(_translate("MainWindow", "终止测试"))
        self.actionPause_Test.setText(_translate("MainWindow", "暂停测试"))
        self.actionLoad_Base_Line.setText(_translate("MainWindow", "加载寄存器基线并测试"))
        self.actionBase_Line_Generator.setText(_translate("MainWindow", "寄存器基线生成器"))
        self.actionshow_command.setText(_translate("MainWindow", "显示常用命令"))
        self.actionAddQuickCommand.setText(_translate("MainWindow", "addquickcommand"))
        self.actionAddQuickCommand.setToolTip(_translate("MainWindow", "addquickcommand"))
        self.actionshow_version.setText(_translate("MainWindow", "show version"))
        self.actionshow_version_detail.setText(_translate("MainWindow", "show version detail"))
        self.actionshow_manu.setText(_translate("MainWindow", "show manu"))
        self.actionshow_int_sta.setText(_translate("MainWindow", "show int sta"))
        self.actionshow_power.setText(_translate("MainWindow", "show power"))
        self.actionshow_fan.setText(_translate("MainWindow", "show fan"))
        self.actionrun_system_shell.setText(_translate("MainWindow", "run-system-shell"))
        self.actiondebug_ssa.setText(_translate("MainWindow", "debug-ssa"))
        self.actionloganalyzer.setText(_translate("MainWindow", "log分析"))

import iconresource_rc

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

